//"SPDX-License-Identifier: UNLICENSED"
pragma solidity ^0.8.6;

import "./DaiToken.sol";
import "./EthToken.sol";
import "./UsdtToken.sol";
import "./TegToken.sol";

import "./stringUtils.sol";
import "./Helpers.sol";

contract TokenFarm {
    string public name = "Tegridy Token Farm";

    address public owner;
    TegToken public tegToken;
    DaiToken public daiToken;
    EthToken public ethToken;
    UsdtToken public usdtToken;

    //dai
    mapping(address => uint256) public daiStakingBalance;
    mapping(address => uint256) public daiLossBalance;
    mapping(address => uint256) public daiEarnedBalance;
    mapping(address => uint256) public daiBorrowedBalance;
    mapping(address => bool) public isStakingDai;
    mapping(address => bool) public isBorrowingDai;
    mapping(address => uint256) public earnedTimeDai;
    mapping(address => uint256) public borrowedTimeDai;

    //eth
    mapping(address => uint256) public ethStakingBalance;
    mapping(address => uint256) public ethLossBalance;
    mapping(address => uint256) public ethEarnedBalance;
    mapping(address => uint256) public ethBorrowedBalance;
    mapping(address => bool) public isStakingEth;
    mapping(address => bool) public isBorrowingEth;
    mapping(address => uint256) public earnedTimeEth;
    mapping(address => uint256) public borrowedTimeEth;

    //usdt
    mapping(address => uint256) public usdtStakingBalance;
    mapping(address => uint256) public usdtLossBalance;
    mapping(address => uint256) public usdtEarnedBalance;
    mapping(address => uint256) public usdtBorrowedBalance;
    mapping(address => bool) public isStakingUsdt;
    mapping(address => bool) public isBorrowingUsdt;
    mapping(address => uint256) public earnedTimeUsdt;
    mapping(address => uint256) public borrowedTimeUsdt;

    event Stake(
        address indexed from,
        uint256 amount,
        uint256 stakingBal,
        uint256 intBal,
        uint256 tegBal,
        uint256 tokenBal
    );
    event Unstake(
        address indexed from,
        uint256 amount,
        uint256 stakingBal,
        uint256 intBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    event YieldWithdraw(
        address indexed to,
        uint256 amountEarned,
        uint256 amountLost,
        uint256 stakingBal,
        uint256 intBal,
        uint256 borrowBal,
        uint256 lossBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    event Borrow(
        address indexed from,
        uint256 amount,
        uint256 borrowBal,
        uint256 lossBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    event Repay(
        address indexed from,
        uint256 amount,
        uint256 borrowBal,
        uint256 lossBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    constructor(
        TegToken _tegToken,
        DaiToken _daiToken,
        EthToken _ethToken,
        UsdtToken _usdtToken
    ) {
        tegToken = _tegToken;
        daiToken = _daiToken;
        ethToken = _ethToken;
        usdtToken = _usdtToken;
        owner = msg.sender;
    }

    //1. Stake Tokens (deposit)
    function stakeTokens(uint256 _amount, string memory _tok)
        public
    {
        if (StringUtils.equal(_tok, "dai")) {
            //Amount staked cannot be smaller than 0
            require(
                _amount > 0 && daiToken.balanceOf(msg.sender) >= _amount,
                "You cannot stake zero tokens"
            );

            if (isStakingDai[msg.sender] == true) {
                uint256 toTransfer = Helpers.calculateEarningYield(earnedTimeDai[msg.sender], daiEarnedBalance[msg.sender]);
                daiEarnedBalance[msg.sender] += toTransfer;
            }
            // Transfer Mock Dai to this contract for staking
            daiToken.transferFrom(msg.sender, address(this), _amount);
            //update start time
            earnedTimeDai[msg.sender] = block.timestamp;
            //update staking balance
            daiStakingBalance[msg.sender] += _amount;
            //update staking status
            isStakingDai[msg.sender] = true;
            emit Stake(
                msg.sender,
                _amount,
                daiStakingBalance[msg.sender],
                daiEarnedBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                daiToken.balanceOf(msg.sender)
            );
        } else if (StringUtils.equal(_tok, "eth")) {
            //Amount staked cannot be smaller than 0
            require(
                _amount > 0 && ethToken.balanceOf(msg.sender) >= _amount
            );

            if (isStakingEth[msg.sender] == true) {
                uint256 toTransfer = Helpers.calculateEarningYield(earnedTimeEth[msg.sender], ethEarnedBalance[msg.sender]);
                ethEarnedBalance[msg.sender] += toTransfer;
            }
            // Transfer Mock eth to this contract for staking
            ethToken.transferFrom(msg.sender, address(this), _amount);
            //update start time
            earnedTimeEth[msg.sender] = block.timestamp;
            //update staking balance
            ethStakingBalance[msg.sender] += _amount;
            // add user to stakers array "only" if they have not yet staked
            // if (!hasStaked[msg.sender]) {
            //     stakers.push(msg.sender);
            // }
            //update staking status
            isStakingEth[msg.sender] = true;
            // hasStaked[msg.sender] = true;
            emit Stake(
                msg.sender,
                _amount,
                ethStakingBalance[msg.sender],
                ethEarnedBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                ethToken.balanceOf(msg.sender)
            );
        } else {
            //Amount staked cannot be smaller than 0
            require(
                _amount > 0 && usdtToken.balanceOf(msg.sender) >= _amount
            );

            if (isStakingUsdt[msg.sender] == true) {
                uint256 toTransfer = Helpers.calculateEarningYield(earnedTimeUsdt[msg.sender], usdtEarnedBalance[msg.sender]);
                usdtEarnedBalance[msg.sender] += toTransfer;
            }
            // Transfer Mock usdt to this contract for staking
            usdtToken.transferFrom(msg.sender, address(this), _amount);
            //update start time
            earnedTimeUsdt[msg.sender] = block.timestamp;
            //update staking balance
            usdtStakingBalance[msg.sender] += _amount;
            // add user to stakers array "only" if they have not yet staked
            //update staking status
            isStakingUsdt[msg.sender] = true;
            // hasStaked[msg.sender] = true;
            emit Stake(
                msg.sender,
                _amount,
                usdtStakingBalance[msg.sender],
                usdtEarnedBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                usdtToken.balanceOf(msg.sender)
            );
        }
    }

    //2. Unstaking Tokens (withdraw)
    function unstakeTokens(uint256 _amount, string memory _tok)
        public
    {
        if (StringUtils.equal(_tok, "dai")) {
            //require amount > 0
            require(
                daiStakingBalance[msg.sender] >= _amount &&
                    isStakingDai[msg.sender] == true &&
                    daiBorrowedBalance[msg.sender] <=
                    (daiStakingBalance[msg.sender] - _amount)
            );

            uint256 yieldTransfer = Helpers.calculateEarningYield(earnedTimeDai[msg.sender], daiEarnedBalance[msg.sender]);
            earnedTimeDai[msg.sender] = block.timestamp;
            uint256 balanceTransfer = _amount;
            _amount = 0;
            //decrease staking balance by amount
            daiStakingBalance[msg.sender] -= balanceTransfer;
            //unstake dai tokens from farm to investor
            daiToken.transfer(msg.sender, balanceTransfer);

            daiEarnedBalance[msg.sender] += yieldTransfer;
            // is he still staking?
            //update staking status
            if (daiStakingBalance[msg.sender] == 0) {
                isStakingDai[msg.sender] = false;
            }
            emit Unstake(
                msg.sender,
                _amount,
                daiStakingBalance[msg.sender],
                daiEarnedBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                daiToken.balanceOf(msg.sender)
            );
        } else if (StringUtils.equal(_tok, "eth")) {
            //require amount > 0
            require(
                ethStakingBalance[msg.sender] >= _amount &&
                    isStakingEth[msg.sender] == true &&
                    ethBorrowedBalance[msg.sender] <=
                    (ethStakingBalance[msg.sender] - _amount)
            );

            uint256 yieldTransfer = Helpers.calculateEarningYield(earnedTimeEth[msg.sender], ethEarnedBalance[msg.sender]);
            earnedTimeEth[msg.sender] = block.timestamp;
            uint256 balanceTransfer = _amount;
            _amount = 0;
            //decrease staking balance by amount
            ethStakingBalance[msg.sender] -= balanceTransfer;
            //unstake eth tokens from farm to investor
            ethToken.transfer(msg.sender, balanceTransfer);

            ethEarnedBalance[msg.sender] += yieldTransfer;
            // is he still staking?
            //update staking status
            if (ethStakingBalance[msg.sender] == 0) {
                isStakingEth[msg.sender] = false;
            }
            emit Unstake(
                msg.sender,
                _amount,
                ethStakingBalance[msg.sender],
                ethEarnedBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                ethToken.balanceOf(msg.sender)
            );
        } else {
            //require amount > 0
            require(
                usdtStakingBalance[msg.sender] >= _amount &&
                    isStakingUsdt[msg.sender] == true &&
                    usdtBorrowedBalance[msg.sender] <=
                    (usdtStakingBalance[msg.sender] - _amount)
            );

            uint256 yieldTransfer = Helpers.calculateEarningYield(earnedTimeUsdt[msg.sender], usdtEarnedBalance[msg.sender]);
            earnedTimeUsdt[msg.sender] = block.timestamp;
            uint256 balanceTransfer = _amount;
            _amount = 0;
            //decrease staking balance by amount
            usdtStakingBalance[msg.sender] -= balanceTransfer;
            //unstake usdt tokens from farm to investor
            usdtToken.transfer(msg.sender, balanceTransfer);

            usdtEarnedBalance[msg.sender] += yieldTransfer;
            // is he still staking?
            //update staking status
            if (usdtStakingBalance[msg.sender] == 0) {
                isStakingUsdt[msg.sender] = false;
            }
            emit Unstake(
                msg.sender,
                _amount,
                usdtStakingBalance[msg.sender],
                usdtEarnedBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                usdtToken.balanceOf(msg.sender)
            );
        }
    }

    //3. Borrow Tokens
    function borrowTokens(uint256 _amount, string memory _tok)
        public
    {
        if (StringUtils.equal(_tok, "dai")) {
            //Amount staked cannot be smaller than 0,
            //Borrower should be staking
            //His staking balance should always be larger than borrowed amount (overcollateralized)
            //Balance of TEG tokens should not be 0 or lower
            require(
                _amount > 0 &&
                    isStakingDai[msg.sender] == true &&
                    daiStakingBalance[msg.sender] >= _amount
            );

            if (isBorrowingDai[msg.sender] == true) {
                uint256 toTransfer = Helpers.calculateLossYield(borrowedTimeDai[msg.sender], daiBorrowedBalance[msg.sender]);
                daiLossBalance[msg.sender] += toTransfer;
            }
            // Transfer Mock Dai to borrower
            // daiToken.approve(address(this), _amount);
            daiToken.transfer(msg.sender, _amount);
            //update start time
            borrowedTimeDai[msg.sender] = block.timestamp;
            //update borrowed balance
            daiBorrowedBalance[msg.sender] += _amount;
            //update borrowing status
            isBorrowingDai[msg.sender] = true;
            emit Borrow(
                msg.sender,
                _amount,
                daiBorrowedBalance[msg.sender],
                daiLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                daiToken.balanceOf(msg.sender)
            );
        } else if (StringUtils.equal(_tok, "eth")) {
            //Amount staked cannot be smaller than 0,
            //Borrower should be staking
            //His staking balance should always be larger than borrowed amount (overcollateralized)
            //Balance of TEG tokens should not be 0 or lower
            require(
                _amount > 0 &&
                    isStakingEth[msg.sender] == true &&
                    ethStakingBalance[msg.sender] >= _amount
            );

            if (isBorrowingEth[msg.sender] == true) {
                uint256 toTransfer = Helpers.calculateLossYield(borrowedTimeEth[msg.sender], ethBorrowedBalance[msg.sender]);
                ethLossBalance[msg.sender] += toTransfer;
            }
            // Transfer Mock eth to borrower
            // ethToken.approve(address(this), _amount);
            ethToken.transfer(msg.sender, _amount);
            //update start time
            borrowedTimeEth[msg.sender] = block.timestamp;
            //update borrowed balance
            ethBorrowedBalance[msg.sender] += _amount;
            //update borrowing status
            isBorrowingEth[msg.sender] = true;
            emit Borrow(
                msg.sender,
                _amount,
                ethBorrowedBalance[msg.sender],
                ethLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                ethToken.balanceOf(msg.sender)
            );
        } else {
            //Amount staked cannot be smaller than 0,
            //Borrower should be staking
            //His staking balance should always be larger than borrowed amount (overcollateralized)
            //Balance of TEG tokens should not be 0 or lower
            require(
                _amount > 0 &&
                    isStakingUsdt[msg.sender] == true &&
                    usdtStakingBalance[msg.sender] >= _amount
            );

            if (isBorrowingUsdt[msg.sender] == true) {
                uint256 toTransfer = Helpers.calculateLossYield(borrowedTimeUsdt[msg.sender], usdtBorrowedBalance[msg.sender]);
                usdtLossBalance[msg.sender] += toTransfer;
            }
            // Transfer Mock usdt to borrower
            // usdtToken.approve(address(this), _amount);
            usdtToken.transfer(msg.sender, _amount);
            //update start time
            borrowedTimeUsdt[msg.sender] = block.timestamp;
            //update borrowed balance
            usdtBorrowedBalance[msg.sender] += _amount;
            //update borrowing status
            isBorrowingUsdt[msg.sender] = true;
            emit Borrow(
                msg.sender,
                _amount,
                usdtBorrowedBalance[msg.sender],
                usdtLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                usdtToken.balanceOf(msg.sender)
            );
        }
    }

    //4. Repay Tokens
    function repayTokens(uint256 _amount, string memory _tok)
        public
    {
        if (StringUtils.equal(_tok, "dai")) {
            require(
                daiBorrowedBalance[msg.sender] >= _amount &&
                    isBorrowingDai[msg.sender] == true
            );

            uint256 yieldTransfer = Helpers.calculateLossYield(borrowedTimeDai[msg.sender], daiBorrowedBalance[msg.sender]);
            borrowedTimeDai[msg.sender] = block.timestamp;
            uint256 balanceTransfer = _amount;
            _amount = 0;
            //decrease borrowed balance by amount
            daiBorrowedBalance[msg.sender] -= balanceTransfer;
            //repay dai tokens to farm
            daiToken.transferFrom(msg.sender, address(this), balanceTransfer);

            daiLossBalance[msg.sender] += yieldTransfer;
            // is he still staking?
            //update staking status
            if (daiBorrowedBalance[msg.sender] == 0) {
                isBorrowingDai[msg.sender] = false;
            }
            emit Repay(
                msg.sender,
                _amount,
                daiBorrowedBalance[msg.sender],
                daiLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                daiToken.balanceOf(msg.sender)
            );
        } else if (StringUtils.equal(_tok, "eth")) {
            require(
                ethBorrowedBalance[msg.sender] >= _amount &&
                    isBorrowingEth[msg.sender] == true
            );

            uint256 yieldTransfer = Helpers.calculateLossYield(borrowedTimeEth[msg.sender], ethBorrowedBalance[msg.sender]);
            borrowedTimeEth[msg.sender] = block.timestamp;
            uint256 balanceTransfer = _amount;
            _amount = 0;
            //decrease borrowed balance by amount
            ethBorrowedBalance[msg.sender] -= balanceTransfer;
            //repay eth tokens to farm
            ethToken.transferFrom(msg.sender, address(this), balanceTransfer);

            ethLossBalance[msg.sender] += yieldTransfer;
            // is he still staking?
            //update staking status
            if (ethBorrowedBalance[msg.sender] == 0) {
                isBorrowingEth[msg.sender] = false;
            }
            emit Repay(
                msg.sender,
                _amount,
                ethBorrowedBalance[msg.sender],
                ethLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                ethToken.balanceOf(msg.sender)
            );
        } else {
            require(
                usdtBorrowedBalance[msg.sender] >= _amount &&
                    isBorrowingUsdt[msg.sender] == true
            );

            uint256 yieldTransfer = Helpers.calculateLossYield(borrowedTimeUsdt[msg.sender], usdtBorrowedBalance[msg.sender]);
            borrowedTimeUsdt[msg.sender] = block.timestamp;
            uint256 balanceTransfer = _amount;
            _amount = 0;
            //decrease borrowed balance by amount
            usdtBorrowedBalance[msg.sender] -= balanceTransfer;
            //repay usdt tokens to farm
            usdtToken.transferFrom(msg.sender, address(this), balanceTransfer);

            usdtLossBalance[msg.sender] += yieldTransfer;
            // is he still staking?
            //update staking status
            if (usdtBorrowedBalance[msg.sender] == 0) {
                isBorrowingUsdt[msg.sender] = false;
            }
            emit Repay(
                msg.sender,
                _amount,
                usdtBorrowedBalance[msg.sender],
                usdtLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                usdtToken.balanceOf(msg.sender)
            );
        }
    }

    //5. withdraw earned yield
    function withdrawYield(string memory _tok) public {
          uint256 toTransferEarned; 
          uint256 toTransferLost;

        if (StringUtils.equal(_tok, "dai")) {

          toTransferEarned = Helpers.calculateEarningYield(earnedTimeDai[msg.sender], daiEarnedBalance[msg.sender]);
          toTransferLost = Helpers.calculateLossYield(borrowedTimeDai[msg.sender], daiBorrowedBalance[msg.sender]);

            require(
                toTransferEarned > 0 ||
                    daiEarnedBalance[msg.sender] > 0 ||
                    toTransferLost > 0 ||
                    daiLossBalance[msg.sender] > 0
            );

            if (daiEarnedBalance[msg.sender] != 0) {
                uint256 oldBalanceEarned = daiEarnedBalance[msg.sender];
                daiEarnedBalance[msg.sender] = 0;
                toTransferEarned += oldBalanceEarned;
            }

            if (daiLossBalance[msg.sender] != 0) {
                uint256 oldBalanceLost = daiLossBalance[msg.sender];
                daiLossBalance[msg.sender] = 0;
                toTransferLost += oldBalanceLost;
            }

            earnedTimeDai[msg.sender] = block.timestamp;
            borrowedTimeDai[msg.sender] = block.timestamp;

            tegToken.transfer(msg.sender, toTransferEarned - toTransferLost);
            emit YieldWithdraw(
                msg.sender,
                toTransferEarned,
                toTransferLost,
                daiStakingBalance[msg.sender],
                daiEarnedBalance[msg.sender],
                daiBorrowedBalance[msg.sender],
                daiLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                daiToken.balanceOf(msg.sender)
            );
        } else if (StringUtils.equal(_tok, "dai")) {
            toTransferEarned = Helpers.calculateEarningYield(earnedTimeEth[msg.sender], ethEarnedBalance[msg.sender]);
            toTransferLost = Helpers.calculateLossYield(borrowedTimeEth[msg.sender], ethBorrowedBalance[msg.sender]);

            require(
                toTransferEarned > 0 ||
                    ethEarnedBalance[msg.sender] > 0 ||
                    toTransferLost > 0 ||
                    ethLossBalance[msg.sender] > 0
            );

            if (ethEarnedBalance[msg.sender] != 0) {
                uint256 oldBalanceEarned = ethEarnedBalance[msg.sender];
                ethEarnedBalance[msg.sender] = 0;
                toTransferEarned += oldBalanceEarned;
            }

            if (ethLossBalance[msg.sender] != 0) {
                uint256 oldBalanceLost = ethLossBalance[msg.sender];
                ethLossBalance[msg.sender] = 0;
                toTransferLost += oldBalanceLost;
            }

            earnedTimeEth[msg.sender] = block.timestamp;
            borrowedTimeEth[msg.sender] = block.timestamp;

            tegToken.transfer(msg.sender, toTransferEarned - toTransferLost);
            emit YieldWithdraw(
                msg.sender,
                toTransferEarned,
                toTransferLost,
                ethStakingBalance[msg.sender],
                ethEarnedBalance[msg.sender],
                ethBorrowedBalance[msg.sender],
                ethLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                ethToken.balanceOf(msg.sender)
            );
        } else {

            toTransferEarned = Helpers.calculateEarningYield(earnedTimeUsdt[msg.sender], usdtEarnedBalance[msg.sender]);
            toTransferLost = Helpers.calculateLossYield(borrowedTimeUsdt[msg.sender], usdtBorrowedBalance[msg.sender]);
            
            require(
                toTransferEarned > 0 ||
                    usdtEarnedBalance[msg.sender] > 0 ||
                    toTransferLost > 0 ||
                    usdtLossBalance[msg.sender] > 0
            );

            if (usdtEarnedBalance[msg.sender] != 0) {
                uint256 oldBalanceEarned = usdtEarnedBalance[msg.sender];
                usdtEarnedBalance[msg.sender] = 0;
                toTransferEarned += oldBalanceEarned;
            }

            if (usdtLossBalance[msg.sender] != 0) {
                uint256 oldBalanceLost = usdtLossBalance[msg.sender];
                usdtLossBalance[msg.sender] = 0;
                toTransferLost += oldBalanceLost;
            }

            earnedTimeUsdt[msg.sender] = block.timestamp;
            borrowedTimeUsdt[msg.sender] = block.timestamp;

            tegToken.transfer(msg.sender, toTransferEarned - toTransferLost);
            emit YieldWithdraw(
                msg.sender,
                toTransferEarned,
                toTransferLost,
                usdtStakingBalance[msg.sender],
                usdtEarnedBalance[msg.sender],
                usdtBorrowedBalance[msg.sender],
                usdtLossBalance[msg.sender],
                tegToken.balanceOf(msg.sender),
                usdtToken.balanceOf(msg.sender)
            );
        }
    }

    // //time functions

    // function calculateEarningTime(address user, string memory _tok)
    //     public
    //     view
    //     returns (uint256)
    // {
    //     if (StringUtils.equal(_tok, "dai")) {
    //         uint256 end = block.timestamp;
    //         uint256 totalTime = end - earnedTimeDai[user];
    //         return totalTime;
    //     } else if (StringUtils.equal(_tok, "eth")) {
    //         uint256 end = block.timestamp;
    //         uint256 totalTime = end - earnedTimeEth[user];
    //         return totalTime;
    //     } else {
    //         uint256 end = block.timestamp;
    //         uint256 totalTime = end - earnedTimeUsdt[user];
    //         return totalTime;
    //     }
    // }

    // function calculateEarningYield(address user, string memory _tok)
    //     public
    //     view
    //     returns (uint256)
    // {
    //     if (StringUtils.equal(_tok, "dai")) {
    //         uint256 time = calculateEarningTime(user, "dai") * 10**18;
    //         uint256 rate = 31536000; // 100%
    //         uint256 timeRate = time / rate;
    //         uint256 rawYield = (daiStakingBalance[user] * timeRate) / 10**18;
    //         return rawYield;
    //     } else if (StringUtils.equal(_tok, "eth")) {
    //         uint256 time = calculateEarningTime(user, "eth") * 10**18;
    //         uint256 rate = 31536000;
    //         uint256 timeRate = time / rate;
    //         uint256 rawYield = (ethStakingBalance[user] * timeRate) / 10**18;
    //         return rawYield;
    //     } else {
    //         uint256 time = calculateEarningTime(user, "usdt") * 10**18;
    //         uint256 rate = 31536000; // 100%
    //         uint256 timeRate = time / rate;
    //         uint256 rawYield = (usdtStakingBalance[user] * timeRate) / 10**18;
    //         return rawYield;
    //     }
    // }

    // function calculateBorrowTime(address user, string memory _tok)
    //     public
    //     view
    //     returns (uint256)
    // {
    //     if (StringUtils.equal(_tok, "dai")) {
    //         uint256 end = block.timestamp;
    //         uint256 totalTime = end - borrowedTimeDai[user];
    //         return totalTime;
    //     } else if (StringUtils.equal(_tok, "eth")) {
    //         uint256 end = block.timestamp;
    //         uint256 totalTime = end - borrowedTimeEth[user];
    //         return totalTime;
    //     } else {
    //         uint256 end = block.timestamp;
    //         uint256 totalTime = end - borrowedTimeUsdt[user];
    //         return totalTime;
    //     }
    // }

    // function calculateLossYield(address user, string memory _tok)
    //     public
    //     view
    //     returns (uint256)
    // {
    //     if (StringUtils.equal(_tok, "dai")) {
    //         uint256 time = Helpers.calculateBorrowTime(borrowedTimeDai[user]) * 10**18;
    //         uint256 rate = 28669090; // 110%
    //         uint256 timeRate = time / rate;
    //         uint256 rawYield = (daiBorrowedBalance[user] * timeRate) / 10**18;
    //         return rawYield;
    //     } else if (StringUtils.equal(_tok, "eth")) {
    //         uint256 time = Helpers.calculateBorrowTime(borrowedTimeEth[user]) * 10**18;
    //         uint256 rate = 28669090; // 110%
    //         uint256 timeRate = time / rate;
    //         uint256 rawYield = (ethBorrowedBalance[user] * timeRate) / 10**18;
    //         return rawYield;
    //     } else {
    //         uint256 time = Helpers.calculateBorrowTime(borrowedTimeUsdt[user]) * 10**18;
    //         uint256 rate = 28669090; // 110%
    //         uint256 timeRate = time / rate;
    //         uint256 rawYield = (usdtBorrowedBalance[user] * timeRate) / 10**18;
    //         return rawYield;
    //     }
    // }
}



// SAVE BIS BIS BIS 
//"SPDX-License-Identifier: UNLICENSED"
pragma solidity ^0.8.6;

import "./DaiToken.sol";
import "./EthToken.sol";
import "./UsdtToken.sol";
import "./TegToken.sol";

import "./stringUtils.sol";
import "./Helpers.sol";

contract TokenFarm {
    string public name = "Tegridy Token Farm";

    address public owner;
    TegToken public tegToken;
    DaiToken public daiToken;
    EthToken public ethToken;
    UsdtToken public usdtToken;

    //dai
    mapping(address => mapping(string => uint256)) public stakingBalance;
    mapping(address => mapping(string => uint256)) public lossBalance;
    mapping(address => mapping(string => uint256)) public earnedBalance;
    mapping(address => mapping(string => uint256)) public borrowedBalance;
    mapping(address => mapping(string => bool)) public isStaking;
    mapping(address => mapping(string => bool)) public isBorrowing;
    mapping(address => mapping(string => uint256)) public earnedTime;
    mapping(address => mapping(string => uint256)) public borrowedTime;

    mapping(string => address) public tokenMapping;

    // //eth
    // mapping(address => uint256) public ethStakingBalance;
    // mapping(address => uint256) public ethLossBalance;
    // mapping(address => uint256) public ethEarnedBalance;
    // mapping(address => uint256) public ethBorrowedBalance;
    // mapping(address => bool) public isStakingEth;
    // mapping(address => bool) public isBorrowingEth;
    // mapping(address => uint256) public earnedTimeEth;
    // mapping(address => uint256) public borrowedTimeEth;

    // //usdt
    // mapping(address => uint256) public usdtStakingBalance;
    // mapping(address => uint256) public usdtLossBalance;
    // mapping(address => uint256) public usdtEarnedBalance;
    // mapping(address => uint256) public usdtBorrowedBalance;
    // mapping(address => bool) public isStakingUsdt;
    // mapping(address => bool) public isBorrowingUsdt;
    // mapping(address => uint256) public earnedTimeUsdt;
    // mapping(address => uint256) public borrowedTimeUsdt;

    event Stake(
        address indexed from,
        uint256 amount,
        uint256 stakingBal,
        uint256 intBal,
        uint256 tegBal,
        uint256 tokenBal
    );
    event Unstake(
        address indexed from,
        uint256 amount,
        uint256 stakingBal,
        uint256 intBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    event YieldWithdraw(
        address indexed to,
        uint256 amountEarned,
        uint256 amountLost,
        uint256 stakingBal,
        uint256 intBal,
        uint256 borrowBal,
        uint256 lossBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    event Borrow(
        address indexed from,
        uint256 amount,
        uint256 borrowBal,
        uint256 lossBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    event Repay(
        address indexed from,
        uint256 amount,
        uint256 borrowBal,
        uint256 lossBal,
        uint256 tegBal,
        uint256 tokenBal
    );

    constructor(
        TegToken _tegToken,
        DaiToken _daiToken,
        EthToken _ethToken,
        UsdtToken _usdtToken
    ) {
        tegToken = _tegToken;
        daiToken = _daiToken;
        ethToken = _ethToken;
        usdtToken = _usdtToken;
        owner = msg.sender;
    }

    //1. Stake Tokens (deposit)
    function stakeTokens(uint256 _amount, string memory _tok) public {
        
        if (StringUtils.equal(_tok, "dai")) {
          DaiToken token = daiToken;
        } else if (StringUtils.equal(_tok, "eth")) {
           EthToken token = ethToken;
        } else {
           UsdtToken token = usdtToken;
        }

        //Amount staked cannot be smaller than 0
        require(_amount > 0 && token.balanceOf(msg.sender) >= _amount);

        if (isStaking[msg.sender][_tok] == true) {
            uint256 toTransfer = Helpers.calculateEarningYield(
                earnedTime[msg.sender][_tok],
                earnedBalance[msg.sender][_tok]
            );
            earnedBalance[msg.sender][_tok] += toTransfer;
        }
        // Transfer to this contract for staking
        token.transferFrom(msg.sender, address(this), _amount);
        //update start time
        earnedTime[msg.sender][_tok] = block.timestamp;
        //update staking balance
        stakingBalance[msg.sender][_tok] += _amount;
        //update staking status
        isStaking[msg.sender][_tok] = true;
        emit Stake(
            msg.sender,
            _amount,
            stakingBalance[msg.sender][_tok],
            earnedBalance[msg.sender][_tok],
            tegToken.balanceOf(msg.sender),
            token.balanceOf(msg.sender)
        );
    }

    //2. Unstaking Tokens (withdraw)
    function unstakeTokens(uint256 _amount, string memory _tok) public {
        address token;

        if (StringUtils.equal(_tok, "dai")) {
            token = daiToken;
        } else if (StringUtils.equal(_tok, "eth")) {
            token = ethToken;
        } else {
            token = usdtToken;
        }

        //require amount > 0
        require(
            stakingBalance[msg.sender][_tok] >= _amount &&
                isStaking[msg.sender][_tok] == true &&
                borrowedBalance[msg.sender][_tok] <=
                (stakingBalance[msg.sender][_tok] - _amount)
        );

        uint256 yieldTransfer = Helpers.calculateEarningYield(
            earnedTime[msg.sender][_tok],
            earnedBalance[msg.sender][_tok]
        );
        earnedTime[msg.sender][_tok] = block.timestamp;
        uint256 balanceTransfer = _amount;
        _amount = 0;
        //decrease staking balance by amount
        stakingBalance[msg.sender][_tok] -= balanceTransfer;
        //unstake dai tokens from farm to investor
        token.transfer(msg.sender, balanceTransfer);

        earnedBalance[msg.sender][_tok] += yieldTransfer;
        // is he still staking?
        //update staking status
        if (stakingBalance[msg.sender][_tok] == 0) {
            isStaking[msg.sender][_tok] = false;
        }
        emit Unstake(
            msg.sender,
            _amount,
            stakingBalance[msg.sender][_tok],
            earnedBalance[msg.sender][_tok],
            tegToken.balanceOf(msg.sender),
            token.balanceOf(msg.sender)
        );
    }

    //3. Borrow Tokens
    function borrowTokens(uint256 _amount, string memory _tok) public {
        address token;

        if (StringUtils.equal(_tok, "dai")) {
            token = daiToken;
        } else if (StringUtils.equal(_tok, "eth")) {
            token = ethToken;
        } else {
            token = usdtToken;
        }
        //Amount staked cannot be smaller than 0,
        //Borrower should be staking
        //His staking balance should always be larger than borrowed amount (overcollateralized)
        //Balance of TEG tokens should not be 0 or lower
        require(
            _amount > 0 &&
                isStaking[msg.sender][_tok] == true &&
                stakingBalance[msg.sender][_tok] >= _amount
        );

        if (isBorrowing[msg.sender][_tok] == true) {
            uint256 toTransfer = Helpers.calculateLossYield(
                borrowedTime[msg.sender][_tok],
                borrowedBalance[msg.sender][_tok]
            );
            lossBalance[msg.sender][_tok] += toTransfer;
        }
        // Transfer Mock Dai to borrower
        // daiToken.approve(address(this), _amount);
        token.transfer(msg.sender, _amount);
        //update start time
        borrowedTime[msg.sender][_tok] = block.timestamp;
        //update borrowed balance
        borrowedBalance[msg.sender][_tok] += _amount;
        //update borrowing status
        isBorrowing[msg.sender][_tok] = true;
        emit Borrow(
            msg.sender,
            _amount,
            borrowedBalance[msg.sender][_tok],
            lossBalance[msg.sender][_tok],
            tegToken.balanceOf(msg.sender),
            token.balanceOf(msg.sender)
        );
    }

    //4. Repay Tokens
    function repayTokens(uint256 _amount, string memory _tok) public {
        address token;

        if (StringUtils.equal(_tok, "dai")) {
            token = daiToken;
        } else if (StringUtils.equal(_tok, "eth")) {
            token = ethToken;
        } else {
            token = usdtToken;
        }
        require(
            borrowedBalance[msg.sender][_tok] >= _amount &&
                isBorrowing[msg.sender][_tok] == true
        );

        uint256 yieldTransfer = Helpers.calculateLossYield(
            borrowedTime[msg.sender][_tok],
            borrowedBalance[msg.sender][_tok]
        );
        borrowedTime[msg.sender][_tok] = block.timestamp;
        uint256 balanceTransfer = _amount;
        _amount = 0;
        //decrease borrowed balance by amount
        borrowedBalance[msg.sender][_tok] -= balanceTransfer;
        //repay dai tokens to farm
        token.transferFrom(msg.sender, address(this), balanceTransfer);

        lossBalance[msg.sender][_tok] += yieldTransfer;
        // is he still staking?
        //update staking status
        if (borrowedBalance[msg.sender][_tok] == 0) {
            isBorrowing[msg.sender][_tok] = false;
        }
        emit Repay(
            msg.sender,
            _amount,
            borrowedBalance[msg.sender][_tok],
            lossBalance[msg.sender][_tok],
            tegToken.balanceOf(msg.sender),
            token.balanceOf(msg.sender)
        );
    }

    //5. withdraw earned yield
    function withdrawYield(string memory _tok) public {
        uint256 toTransferEarned;
        uint256 toTransferLost;

        address token;

        if (StringUtils.equal(_tok, "dai")) {
            token = daiToken;
        } else if (StringUtils.equal(_tok, "eth")) {
            token = ethToken;
        } else {
            token = usdtToken;
        }

        toTransferEarned = Helpers.calculateEarningYield(
            earnedTime[msg.sender][_tok],
            earnedBalance[msg.sender][_tok]
        );
        toTransferLost = Helpers.calculateLossYield(
            borrowedTime[msg.sender][_tok],
            borrowedBalance[msg.sender][_tok]
        );

        require(
            toTransferEarned > 0 ||
                earnedBalance[msg.sender][_tok] > 0 ||
                toTransferLost > 0 ||
                lossBalance[msg.sender][_tok] > 0
        );

        if (earnedBalance[msg.sender][_tok] != 0) {
            uint256 oldBalanceEarned = earnedBalance[msg.sender][_tok];
            earnedBalance[msg.sender][_tok] = 0;
            toTransferEarned += oldBalanceEarned;
        }

        if (lossBalance[msg.sender][_tok] != 0) {
            uint256 oldBalanceLost = lossBalance[msg.sender][_tok];
            lossBalance[msg.sender][_tok] = 0;
            toTransferLost += oldBalanceLost;
        }

        earnedTime[msg.sender][_tok] = block.timestamp;
        borrowedTime[msg.sender][_tok] = block.timestamp;

        tegToken.transfer(msg.sender, toTransferEarned - toTransferLost);
        emit YieldWithdraw(
            msg.sender,
            toTransferEarned,
            toTransferLost,
            stakingBalance[msg.sender][_tok],
            earnedBalance[msg.sender][_tok],
            borrowedBalance[msg.sender][_tok],
            lossBalance[msg.sender][_tok],
            tegToken.balanceOf(msg.sender),
            token.balanceOf(msg.sender)
        );
    }
}
